#!/usr/bin/env python
# -*- coding: utf8 -*-

#Hippocampe: Intel aggregator
#@author 2015 CERT-BDF <cert@banque-france.fr>
#@see The GNU Public License (GPL)
#
#This file is part of Hippocampe.
#
#Hippocampe is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 3 of the License, or
#(at your option) any later version.
#
#Hippocampe is distributed in the hope that it will be useful, but
#WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
#or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
#for more details.
#
#You should have received a copy of the GNU General Public License along
#with Hippocampe; if not, write to the Free Software Foundation, Inc.,
#59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#or see <http://www.gnu.org/licenses/>.
#
import os
from objects.Source import Source
from downloader import simpleDownload
import requests
from parser import csvParser
from configparser import NoOptionError, NoSectionError
from objects.Intel import Intel
import logging
logger = logging.getLogger(__name__)

def main(listSessions, cfgPath):
	confName = os.path.basename(os.path.normpath(cfgPath))

	logger.info('processFeed.main launched for %s', confName)
	#the function returns a report concerning the feed process
	#the instructions below are used to build the report
	report = dict()
	report[confName] = dict()
	report[confName]['error'] = list()
	
	try:
		source = Source(cfgPath)
		#index the source's data into ES if it does not already exist
		#if it does, update the lastQuery date and make sure that the source's score in ES
		#equals the source's score in conf file
		#conf file's score is the reference and will always be pushed to ES
		source.indexSourceInES()
		
		try:
			#downloading feed with authenticated sessions
			#streaming mode
			feedPage = simpleDownload(source.source, listSessions)
			nbFail = 0
			nbSuccess = 0
			try:
				#the cfgPath is given in parameters because it contains the delimiter
				#the function will return a csvDictReader
				parsedPage = csvParser(feedPage, cfgPath)
				parsedPage = list(parsedPage)
				print parsedPage[0]
				#indexing information from the parsedLine in elasticsearch
				#if it does not exist, creates it
				#and creates it in the index/type: hippocampe/new
				#if it does, update the lastAppearance date
				for intelligence in parsedPage:
					#intelligence looks like
					#{'domain': 'www.galliagroup.com', 'original_reference-why_it_was_listed': 'app.webinspector.com', u'extra': ['20160304', '20160113', '20140817', '20140322', '20131006', '', '20140624'], 'nextvalidation': '20160401', 'blank': '', 'type': 'highrisk'}
					try:
						intel = Intel(intelligence, cfgPath, source.idInES)
						intel.indexIntelInES()
						nbSuccess += 1
					except Exception as e:
						logger.error('Indexing %s failed', intelligence, exc_info = True)
						report[confName]['error'].append(str(e))
						nbFail += 1
			except NoSectionError as e:
				logger.error('fail in parsing %s for the parser', confName, exc_info = True)
				report[confName]['error'].append(str(e))
			except NoOptionError as e:
				logger.error('fail in parsing %s file for the parser', confName, exc_info = True)
				report[confName]['error'].append(str(e))
		except requests.exceptions.RequestException as e:
			logger.error('downloading %s failed', source.source, exc_info = True)
			#filling the report
			report[confName]['error'].append(str(e))
	except NoSectionError as e:
		logger.error('fail in parsing %s for the source', confName, exc_info = True)
		report[confName]['error'].append(str(e))
	except NoOptionError as e:
		logger.error('fail in parsing %s for the source', confName, exc_info = True)
		report[confName]['error'].append(str(e))
	except Exception as e:
		logger.error('processFeed.main failed for %s, no idea where it came from', confName, exc_info = True)

	report[confName]['nbSucess'] = nbSuccess
	report[confName]['nbFail'] = nbFail

	#the report looks like
	#{'dnsbh_DOMAIN.conf': {'error': [], 'nbFail': 0, 'nbSucess': 13921}}
	logger.info('processFeed.main for %s end', confName)
	return report
			
if __name__ == '__main__':
	main()
